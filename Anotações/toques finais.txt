MVP!

Home:
   v retirar botão da home 
   v retirar os "hours test"
   v apagar js de hour test
   v dar uma silhueta ao site (dar espaçamento lateral - centralizar as infos)
   v alinhar 'header' dos dias da semana DSTQQSS
   v centralizar nome do evento
   v remover primeiro lorem ipsum
   div lateral:
      v adicionar div horário de início/fim
      v repetir abaixo mas para hora final
      v adicionar botão criar evento
   v atualizar paleta de cores
   v colocar required no input nome do evento
   v header do navbar tem que ser o verde claro

event:
   v caguei na formatação xD
   v retirar botão 'mudar cor'
   v retirar códigos inúteis do mudar cor
   - adicionar div do meio:
      v Div título com nome do evento
      v div com régua de cores
      - adicionar nome do usuário atual:
         - esconder div lateral enquanto nome não for preenchido
         - mostrar form com o nomes enquanto o nome não for preenchido
         - esconder forms com o nome quando preenchido
         - salvar numa variavel local o nome do meliante
         - integrar ao fetch o nome da pessoa
      - div com mouse event dos integrantes daquele horário:
         - salvar um dicionário com o id da div?
         - adicionar no loop de users_quantity o valor ao dicionário
         - evento de mouse para acionar evento  
         - função que cria as div com os usuários daquele horário
         - ao sair do evento, pensar em algo para cancelar a função ou apagar as divs (while hover?) 
   - atualizar paleta de cores

limpar os console.log

atualizar texto da homepage

terminar de olhar os requisitos: https://cs50.harvard.edu/x/2024/project/




*Depois

adicionar um readme 

corrigir left panel em event.html?

modernizar add nome do evento

definir todo o BD como text?

corrigir tamanho dos panels

responsividade?

div lateral:
   - Adicionar botão(-) / input / botão(+)
   - Adicionar botão (+15 min) / botão(-15 min)
   - adicionar JS para mudar valores

dar uma olhada no caos que deve estar o .css

Filtrar os dias primeiro por Ano, depois mês, depois dia

adicionar régua de temperatura de qtd de pessoas

avaliar necessidade dos minutos na pagina index

Mostre ao usuário que suas seleções foram salvas com sucesso.

os dias selecionados fora de ordem, tem que estar em ordem na home

mostrar dia numa outra div logo abaixo da do meio, onde mostra o dia que mais pessoas irão

se selecionar dia 30, 31 e 1, a ordem do evento fica como 1, 30, 31

2. Implemente a interação de clique e arrasto:
   - Use JavaScript para detectar eventos de mouse (mousedown, mousemove, mouseup).
   - Ao clicar, marque o primeiro intervalo como selecionado.
   - Enquanto arrasta, continue marcando os intervalos sobre os quais o mouse passa.

4. Armazene as seleções:
   - Crie uma estrutura de dados para guardar os horários selecionados. (adicionar um botão para guardar essas informações::)
   * possivelmente adicionar um ajax em tempo real? questionar o claude sobre isso
   - Atualize essa estrutura conforme o usuário faz seleções.

se a hora final do evento for tipo 3 da manhã e a inicial for 18, o código detectar essa putaria
embelezar o spyscrolls
responsividade
na div ano do calendário, talvez mudar cor quando aproximar de um outro ano ao arrastar os dias
arrumar a 'semana' do scrollspy
gerar chave aleatoria para o link url de invite
adicionar senha ao usuario
dar uma estilizida no site
mostrar botão 'add para db' somente se div_num >= 1 (ou outro processo de validação)
validar inputs que entram no SQL
proteções no código, como SQL injection

mudar valor do select de default 12 e 18 (hour_1 e hour_2)

9. Implemente a responsividade:
   - Certifique-se de que a interface funcione bem em dispositivos móveis.



-talvez?

MUI react

AXIOS

ver com a turma o que faz sentido ficar do lado do servidor e o que deveria ser cliente

adicionar doação ou ad?

add botão de desmarcar todos os dias

adicionar extended templates?


## Feito!

3. Estilize os intervalos selecionados:
   - Use CSS para destacar visualmente os intervalos escolhidos.

5. Implemente a funcionalidade de desselecionar:
   - Permita que o usuário desmarque intervalos já selecionados.
/\ está feito? acho que sim

1. Crie uma grade de horários:
   V Divida cada dia em intervalos de tempo (por exemplo, 30 minutos).
   V Use uma tabela HTML ou divs para representar visualmente esses intervalos.
   V adicionar as horas ao lado da box de horários
   
fazer por hour_chunk, igual no print

4. Armazene as seleções:
   V o que indicaria quais intervalos irão para o DB são as classes selecionadas?
   V adicionar um botão para guardar os valores com as classes específicas ativadas
   V arrumar o JSON
   V Configurar corretamente o BD no backend
   V corrigir ordem dos meses no right panel do evento

v - Transferir para a esquerda aquela templates


copiar o layout, mas que puxe do BD
   v copiar o layout
   v mandar um json pro front com infos do BD
   v fazer um loop que
      v compara os atributos da div com elemento[i] do json, se for compatível, str(int(user_quantity)++)
      v adicionar uma variavel max_users no js que compara com user_quantity em cada loop
   v definir cor cheia
   v chamar função mudar_cor *(max_users-users_quantity)
      v alterar a cor de acordo com a quantidade de pessoas naquela mesma div

v limpar dados errôneos do bd, provavelmente
